#2차원 리스트 - 리스트 내부에 리스트가 있다
#matrix - 행, 열로 이뤄짐

d = [
    [2, 3],
    [30, 40],
    [50, 60]
]
print(d) #[[2, 3]]
print(type(d)) #<class 'list'>

#인덱싱 - 요소 접근(조회)
print(d[0][0]) #2
print(d[0][1]) #3
print(d[1][0]) #30
print(d[1][1]) #40
print(d[2][0]) #50
print(d[2][1]) #60

#요소 추가
d.append([70,80])
print(d) #[[2, 3], [30, 40], [50, 60], [70, 80]]

#요소 수정
d[0][0] = 90
d[0][1] = 100
print(d) #[[90, 100], [30, 40], [50, 60], [70, 80]]

d[0] = [10, 20]
print(d) #[[10, 20], [30, 40], [50, 60], [70, 80]]

d[1].pop(1)
print(d) #[[10, 20], [30], [50, 60], [70, 80]]
del d[1][0]
print(d) #[[10, 20], [], [50, 60], [70, 80]]
del d[:2]
print(d) #[[50, 60], [70, 80]]

#전체 조회
d = [
    [2, 3,4],
    [30,40,4],
    [50,60,3],
    [70,80,2],
    [90,100,1]
]
print('리스트의 크기(행) : ' , len(d))
print('리스트의 크기(열) : ' , len(d[0]))
for i in range(len(d)): #해당 리스트의 행의 수만큼 반복
    for j in range(len(d[i])): #해당 리스트의 행의 항목만큼 반복
        print(d[i][j], end= " ")
    print()

for x, y, z in d:
    print(x, y, z)
    #열의 수와 인자의 수가 같다면 이렇게 표현 가능(여기서 인자란 x,y,z를 말한다)
    #단 전체적으로 각 행의 열의 수가 같아야 함
